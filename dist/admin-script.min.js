import{StorageKeys}from"./types.js";import{debounce,SafeStorage,DOMUtils,AnimationUtils,ImageUtils,ValidationUtils,PerformanceUtils,FormatUtils}from"./utils.js";class AdminApp{constructor(){this.portfolioData=[];this.productsData=[];this.currentUser=null;this.cropper=null;this.currentImageTarget="portfolio";this.currentEditingId=null;this.isInitialized=false;this.thumbnailSizes=[];this.elements={};this.siteSettings=this.getDefaultSettings();this.thumbnailSizes=this.getDefaultThumbnailSizes();this.bindMethods()}bindMethods(){this.handleTabSwitch=this.handleTabSwitch.bind(this);this.handleFormSubmit=this.handleFormSubmit.bind(this);this.handleImageUpload=this.handleImageUpload.bind(this);this.handleCropperSave=this.handleCropperSave.bind(this);this.handleDeleteItem=this.handleDeleteItem.bind(this);this.handleEditItem=this.handleEditItem.bind(this)}async init(){if(this.isInitialized)return;PerformanceUtils.mark("admin-init-start");try{this.cacheElements();await this.loadData();this.setupEventListeners();await this.renderContent();this.setupFormValidation();this.setupImageHandlers();this.isInitialized=true;PerformanceUtils.measure("Admin Initialization","admin-init-start");this.showMessage("Admin panel loaded successfully!","success");console.log("🔧 Admin panel initialized with TypeScript!")}catch(error){console.error("❌ Failed to initialize admin panel:",error);this.showMessage("Failed to load admin panel","error")}}cacheElements(){this.elements={portfolioGrid:DOMUtils.getElementById("portfolioGrid"),productsGrid:DOMUtils.getElementById("productsGrid"),cropperModal:DOMUtils.getElementById("cropperModal"),cropperImage:DOMUtils.getElementById("cropperImage"),profileImage:DOMUtils.getElementById("profileImage"),tabButtons:DOMUtils.querySelectorAll(".tab-btn"),tabContents:DOMUtils.querySelectorAll(".tab-content"),forms:DOMUtils.querySelectorAll("form")}}async loadData(){PerformanceUtils.mark("admin-data-load-start");this.portfolioData=SafeStorage.get(StorageKeys.PORTFOLIO_DATA,this.getDefaultPortfolio());this.productsData=SafeStorage.get(StorageKeys.PRODUCTS_DATA,this.getDefaultProducts());this.siteSettings=SafeStorage.get(StorageKeys.SITE_SETTINGS,this.getDefaultSettings());this.currentUser=SafeStorage.get(StorageKeys.USER_DATA,null);PerformanceUtils.measure("Admin Data Loading","admin-data-load-start")}setupEventListeners(){if(this.elements.tabButtons){DOMUtils.addEventListeners(this.elements.tabButtons,"click",this.handleTabSwitch)}if(this.elements.forms){this.elements.forms.forEach(form=>{form.addEventListener("submit",this.handleFormSubmit)})}const imageInputs=DOMUtils.querySelectorAll('input[type="file"]');DOMUtils.addEventListeners(imageInputs,"change",this.handleImageUpload);this.setupCropperHandlers();document.addEventListener("keydown",this.handleKeyboardShortcuts.bind(this));this.setupAutoSave()}setupCropperHandlers(){const cropperModal=this.elements.cropperModal;if(!cropperModal)return;const saveBtn=cropperModal.querySelector(".cropper-save");saveBtn?.addEventListener("click",this.handleCropperSave);const cancelBtn=cropperModal.querySelector(".cropper-cancel");cancelBtn?.addEventListener("click",()=>this.closeCropperModal());const overlay=cropperModal.querySelector(".modal-overlay");overlay?.addEventListener("click",()=>this.closeCropperModal())}setupFormValidation(){const forms=this.elements.forms;if(!forms)return;forms.forEach(form=>{const inputs=form.querySelectorAll("input, textarea, select");inputs.forEach(input=>{input.addEventListener("blur",()=>this.validateField(input));input.addEventListener("input",debounce(()=>this.validateField(input),300))})})}setupImageHandlers(){const profileImage=this.elements.profileImage;if(profileImage){const editBtn=document.querySelector(".edit-profile-image");editBtn?.addEventListener("click",()=>this.editProfileImage())}const imageInputs=DOMUtils.querySelectorAll('input[type="file"][accept*="image"]');imageInputs.forEach(input=>{input.addEventListener("change",e=>this.previewImage(e.target))})}setupAutoSave(){const autoSaveInterval=3e4;setInterval(()=>{this.autoSave()},autoSaveInterval);window.addEventListener("beforeunload",()=>{this.saveAllData()})}async renderContent(){PerformanceUtils.mark("admin-render-start");await Promise.all([this.renderPortfolioItems(),this.renderProductItems(),this.loadSettings(),this.updateStatistics()]);PerformanceUtils.measure("Admin Content Rendering","admin-render-start")}async renderPortfolioItems(){const container=this.elements.portfolioGrid;if(!container)return;container.innerHTML="";if(this.portfolioData.length===0){container.innerHTML='<div class="empty-state">No portfolio items yet. Add your first item!</div>';return}const fragment=document.createDocumentFragment();for(const item of this.portfolioData){const card=this.createPortfolioAdminCard(item);fragment.appendChild(card)}container.appendChild(fragment)}createPortfolioAdminCard(item){const card=DOMUtils.createElement("div","admin-card");card.innerHTML=`\n      <div class="admin-card-image">\n        <img src="${item.thumbnail||item.image}" alt="${item.title}" loading="lazy">\n        <div class="admin-card-overlay">\n          <button class="btn btn-sm btn-primary edit-btn" data-id="${item.id}">\n            <i class="fas fa-edit"></i> Edit\n          </button>\n          <button class="btn btn-sm btn-danger delete-btn" data-id="${item.id}">\n            <i class="fas fa-trash"></i> Delete\n          </button>\n        </div>\n      </div>\n      <div class="admin-card-content">\n        <h4>${item.title}</h4>\n        <p class="admin-card-category">${this.getCategoryName(item.category)}</p>\n        <div class="admin-card-meta">\n          <span class="admin-card-id">ID: ${item.id}</span>\n          <span class="admin-card-status ${item.status||"active"}">\n            ${(item.status||"active").toUpperCase()}\n          </span>\n        </div>\n      </div>\n    `;const editBtn=card.querySelector(".edit-btn");const deleteBtn=card.querySelector(".delete-btn");editBtn?.addEventListener("click",()=>this.editPortfolioItem(item.id));deleteBtn?.addEventListener("click",()=>this.deletePortfolioItem(item.id));return card}async renderProductItems(){const container=this.elements.productsGrid;if(!container)return;container.innerHTML="";if(this.productsData.length===0){container.innerHTML='<div class="empty-state">No products yet. Add your first product!</div>';return}const fragment=document.createDocumentFragment();for(const product of this.productsData){const card=this.createProductAdminCard(product);fragment.appendChild(card)}container.appendChild(fragment)}createProductAdminCard(product){const card=DOMUtils.createElement("div","admin-card");card.innerHTML=`\n      <div class="admin-card-image">\n        <img src="${product.image}" alt="${product.name}" loading="lazy">\n        <div class="admin-card-overlay">\n          <button class="btn btn-sm btn-primary edit-btn" data-id="${product.id}">\n            <i class="fas fa-edit"></i> Edit\n          </button>\n          <button class="btn btn-sm btn-danger delete-btn" data-id="${product.id}">\n            <i class="fas fa-trash"></i> Delete\n          </button>\n        </div>\n      </div>\n      <div class="admin-card-content">\n        <h4>${product.name}</h4>\n        <p class="admin-card-description">${product.description}</p>\n        <div class="admin-card-price">${FormatUtils.formatPrice(product.price)}</div>\n        <div class="admin-card-meta">\n          <span class="admin-card-id">ID: ${product.id}</span>\n          <span class="admin-card-status ${product.status}">\n            ${product.status.toUpperCase()}\n          </span>\n        </div>\n      </div>\n    `;const editBtn=card.querySelector(".edit-btn");const deleteBtn=card.querySelector(".delete-btn");editBtn?.addEventListener("click",()=>this.editProductItem(product.id));deleteBtn?.addEventListener("click",()=>this.deleteProductItem(product.id));return card}async loadSettings(){const{siteName:siteName,heroTitle:heroTitle,heroSubtitle:heroSubtitle,aboutText:aboutText,whatsappNumber:whatsappNumber,profileImage:profileImage}=this.siteSettings;this.setFormValue("siteName",siteName);this.setFormValue("heroTitle",heroTitle);this.setFormValue("heroSubtitle",heroSubtitle);this.setFormValue("aboutText",aboutText);this.setFormValue("whatsappNumber",whatsappNumber);if(profileImage&&this.elements.profileImage){this.elements.profileImage.src=profileImage}}async updateStatistics(){const stats={totalPortfolio:this.portfolioData.length,totalProducts:this.productsData.length,activeProducts:this.productsData.filter(p=>p.status==="active").length,totalCategories:new Set(this.portfolioData.map(p=>p.category)).size};this.updateStatElement("totalPortfolio",stats.totalPortfolio);this.updateStatElement("totalProducts",stats.totalProducts);this.updateStatElement("activeProducts",stats.activeProducts);this.updateStatElement("totalCategories",stats.totalCategories)}handleTabSwitch(event,element){event.preventDefault();const targetTab=element.dataset.tab;if(!targetTab)return;this.elements.tabButtons?.forEach(btn=>DOMUtils.removeClass(btn,"active"));DOMUtils.addClass(element,"active");this.elements.tabContents?.forEach(content=>DOMUtils.removeClass(content,"active"));const targetContent=DOMUtils.getElementById(`${targetTab}Tab`);if(targetContent){DOMUtils.addClass(targetContent,"active")}this.loadTabData(targetTab)}async handleFormSubmit(event){event.preventDefault();const form=event.target;const formData=new FormData(form);const formType=form.dataset.type;try{switch(formType){case"portfolio":await this.handlePortfolioSubmit(formData);break;case"product":await this.handleProductSubmit(formData);break;case"settings":await this.handleSettingsSubmit(formData);break;default:throw new Error("Unknown form type")}this.showMessage("Data saved successfully!","success");form.reset()}catch(error){console.error("Form submission error:",error);this.showMessage("Failed to save data","error")}}async handlePortfolioSubmit(formData){const portfolioItem={title:formData.get("title"),category:formData.get("category"),description:formData.get("description"),status:formData.get("status")||"active"};if(!portfolioItem.title||!portfolioItem.category){throw new Error("Title and category are required")}if(this.currentEditingId){const index=this.portfolioData.findIndex(item=>item.id===this.currentEditingId);if(index!==-1){const existingItem=this.portfolioData[index];if(existingItem){this.portfolioData[index]={...existingItem,...portfolioItem,id:existingItem.id}}}this.currentEditingId=null}else{const newItem={...portfolioItem,id:this.generateId(),image:portfolioItem.image||ImageUtils.createPlaceholder(400,300,portfolioItem.title||"Portfolio Item")};this.portfolioData.push(newItem)}await this.savePortfolioData();await this.renderPortfolioItems()}async handleProductSubmit(formData){const productItem={name:formData.get("name"),description:formData.get("description"),price:parseInt(formData.get("price")),status:formData.get("status")||"active"};if(!productItem.name||!productItem.price){throw new Error("Name and price are required")}if(this.currentEditingId){const index=this.productsData.findIndex(item=>item.id===this.currentEditingId);if(index!==-1){const existingItem=this.productsData[index];if(existingItem){this.productsData[index]={...existingItem,...productItem,id:existingItem.id}}}this.currentEditingId=null}else{const newItem={...productItem,id:this.generateId(),image:productItem.image||ImageUtils.createPlaceholder(300,200,productItem.name||"Product")};this.productsData.push(newItem)}await this.saveProductsData();await this.renderProductItems()}async handleSettingsSubmit(formData){const settings={siteName:formData.get("siteName"),heroTitle:formData.get("heroTitle"),heroSubtitle:formData.get("heroSubtitle"),aboutText:formData.get("aboutText"),whatsappNumber:formData.get("whatsappNumber")};if(settings.whatsappNumber&&!ValidationUtils.isValidPhoneNumber(settings.whatsappNumber)){throw new Error("Invalid WhatsApp number format")}this.siteSettings={...this.siteSettings,...settings};await this.saveSiteSettings()}async handleImageUpload(event,element){const file=element.files?.[0];if(!file)return;if(!ValidationUtils.isValidImageFile(file)){this.showMessage("Please select a valid image file","error");return}if(!ValidationUtils.isValidFileSize(file,5*1024*1024)){this.showMessage("File size must be less than 5MB","error");return}try{const imageUrl=await ImageUtils.fileToDataURL(file);const targetType=element.dataset.target;this.currentImageTarget=targetType||"portfolio";this.showCropperModal(imageUrl)}catch(error){console.error("Image upload error:",error);this.showMessage("Failed to process image","error")}}async handleCropperSave(){if(!this.cropper)return;try{const canvas=this.cropper.getCroppedCanvas({width:800,height:600,imageSmoothingEnabled:true,imageSmoothingQuality:"high"});const croppedImageUrl=canvas.toDataURL("image/jpeg",.9);await this.applyCroppedImage(croppedImageUrl);this.closeCropperModal();this.showMessage("Image updated successfully!","success")}catch(error){console.error("Cropper save error:",error);this.showMessage("Failed to save image","error")}}async handleDeleteItem(event,element){const id=parseInt(element.dataset.id||"0");const type=element.dataset.type;if(!id||!type)return;const confirmed=await this.showConfirmDialog("Delete Item",`Are you sure you want to delete this ${type} item? This action cannot be undone.`);if(!confirmed)return;try{if(type==="portfolio"){await this.deletePortfolioItem(id)}else{await this.deleteProductItem(id)}this.showMessage("Item deleted successfully!","success")}catch(error){console.error("Delete error:",error);this.showMessage("Failed to delete item","error")}}async handleEditItem(event,element){const id=parseInt(element.dataset.id||"0");const type=element.dataset.type;if(!id||!type)return;try{if(type==="portfolio"){await this.editPortfolioItem(id)}else{await this.editProductItem(id)}}catch(error){console.error("Edit error:",error);this.showMessage("Failed to load item for editing","error")}}handleKeyboardShortcuts(event){if(event.ctrlKey&&event.key==="s"){event.preventDefault();this.saveAllData();this.showMessage("Data saved!","success")}if(event.key==="Escape"){this.closeCropperModal()}}showCropperModal(imageUrl){const modal=this.elements.cropperModal;const image=this.elements.cropperImage;if(!modal||!image){console.error("Cropper modal elements not found");return}image.src=imageUrl;DOMUtils.addClass(modal,"active");this.initializeCropper()}closeCropperModal(){const modal=this.elements.cropperModal;if(!modal)return;DOMUtils.removeClass(modal,"active");if(this.cropper){this.cropper.destroy();this.cropper=null}}initializeCropper(){const image=this.elements.cropperImage;if(!image||typeof Cropper==="undefined"){console.error("Cropper not available or image element not found");return}const config=this.getCropperConfig();image.onload=()=>{this.cropper=new Cropper(image,config)}}getCropperConfig(){const baseConfig={aspectRatio:4/3,viewMode:1,dragMode:"move",autoCropArea:.8,responsive:true,restore:false,guides:true,center:true,highlight:false,cropBoxMovable:true,cropBoxResizable:true,toggleDragModeOnDblclick:false};switch(this.currentImageTarget){case"profile":return{...baseConfig,aspectRatio:1};case"product":return{...baseConfig,aspectRatio:3/2};case"portfolio":default:return{...baseConfig,aspectRatio:4/3}}}async applyCroppedImage(imageUrl){switch(this.currentImageTarget){case"profile":await this.updateProfileImage(imageUrl);break;case"portfolio":await this.updatePortfolioImage(imageUrl);break;case"product":await this.updateProductImage(imageUrl);break}}async updateProfileImage(imageUrl){this.siteSettings.profileImage=imageUrl;if(this.elements.profileImage){this.elements.profileImage.src=imageUrl}await this.saveSiteSettings()}async updatePortfolioImage(imageUrl){if(!this.currentEditingId)return;const item=this.portfolioData.find(p=>p.id===this.currentEditingId);if(item){item.image=imageUrl;item.thumbnail=await ImageUtils.createThumbnail(imageUrl,300,200);await this.savePortfolioData();await this.renderPortfolioItems()}}async updateProductImage(imageUrl){if(!this.currentEditingId)return;const item=this.productsData.find(p=>p.id===this.currentEditingId);if(item){item.image=imageUrl;await this.saveProductsData();await this.renderProductItems()}}editProfileImage(){const profileImage=this.elements.profileImage;const cropperImage=this.elements.cropperImage;const cropperModal=this.elements.cropperModal;if(!profileImage||!cropperImage||!cropperModal){this.showMessage("Profile image editing is not available","error");return}if(profileImage.src.startsWith("data:image/svg+xml")){this.showMessage("Please upload a profile image first","warning");return}this.currentImageTarget="profile";this.showCropperModal(profileImage.src)}async editPortfolioItem(id){const item=this.portfolioData.find(p=>p.id===id);if(!item)return;this.currentEditingId=id;this.setFormValue("title",item.title);this.setFormValue("category",item.category);this.setFormValue("description",item.description||"");this.setFormValue("status",item.status||"active");this.switchToTab("portfolio");const form=DOMUtils.querySelector('form[data-type="portfolio"]');if(form){form.scrollIntoView({behavior:"smooth"})}}async editProductItem(id){const item=this.productsData.find(p=>p.id===id);if(!item)return;this.currentEditingId=id;this.setFormValue("name",item.name);this.setFormValue("description",item.description);this.setFormValue("price",item.price.toString());this.setFormValue("status",item.status);this.switchToTab("products");const form=DOMUtils.querySelector('form[data-type="product"]');if(form){form.scrollIntoView({behavior:"smooth"})}}async deletePortfolioItem(id){const index=this.portfolioData.findIndex(item=>item.id===id);if(index===-1)return;this.portfolioData.splice(index,1);await this.savePortfolioData();await this.renderPortfolioItems();await this.updateStatistics()}async deleteProductItem(id){const index=this.productsData.findIndex(item=>item.id===id);if(index===-1)return;this.productsData.splice(index,1);await this.saveProductsData();await this.renderProductItems();await this.updateStatistics()}switchToTab(tabName){const tabButton=DOMUtils.querySelector(`[data-tab="${tabName}"]`);if(tabButton){tabButton.click()}}async loadTabData(tabName){switch(tabName){case"dashboard":await this.updateStatistics();break;case"portfolio":await this.renderPortfolioItems();break;case"products":await this.renderProductItems();break;case"settings":await this.loadSettings();break}}validateField(input){const value=input.value.trim();const type=input.type;const required=input.hasAttribute("required");let isValid=true;let errorMessage="";if(required&&!value){isValid=false;errorMessage="This field is required"}if(value&&!isValid){switch(type){case"email":isValid=ValidationUtils.isValidEmail(value);errorMessage="Please enter a valid email address";break;case"tel":isValid=ValidationUtils.isValidPhoneNumber(value);errorMessage="Please enter a valid phone number";break;case"url":isValid=ValidationUtils.isValidURL(value);errorMessage="Please enter a valid URL";break;case"number":const num=parseFloat(value);isValid=!isNaN(num)&&num>=0;errorMessage="Please enter a valid positive number";break}}DOMUtils.toggleClass(input,"invalid",!isValid);DOMUtils.toggleClass(input,"valid",isValid&&!!value);this.showFieldError(input,isValid?"":errorMessage);return isValid}showFieldError(input,message){let errorElement=input.parentElement?.querySelector(".field-error");if(!errorElement){errorElement=DOMUtils.createElement("div","field-error");input.parentElement?.appendChild(errorElement)}errorElement.textContent=message;DOMUtils.toggleClass(errorElement,"visible",!!message)}previewImage(input){const file=input.files?.[0];if(!file)return;const reader=new FileReader;reader.onload=e=>{const previewContainer=input.parentElement?.querySelector(".image-preview");if(previewContainer){previewContainer.innerHTML=`<img src="${e.target?.result}" alt="Preview">`}};reader.readAsDataURL(file)}async autoSave(){try{await this.saveAllData();console.log("📁 Auto-save completed")}catch(error){console.error("Auto-save failed:",error)}}async saveAllData(){await Promise.all([this.savePortfolioData(),this.saveProductsData(),this.saveSiteSettings()])}async savePortfolioData(){SafeStorage.set(StorageKeys.PORTFOLIO_DATA,this.portfolioData)}async saveProductsData(){SafeStorage.set(StorageKeys.PRODUCTS_DATA,this.productsData)}async saveSiteSettings(){SafeStorage.set(StorageKeys.SITE_SETTINGS,this.siteSettings)}setFormValue(name,value){const input=DOMUtils.querySelector(`[name="${name}"]`);if(input){input.value=value}}updateStatElement(id,value){const element=DOMUtils.getElementById(id);if(element){AnimationUtils.animateNumber(element,value,1e3)}}showMessage(message,type="info"){const messageContainer=DOMUtils.getElementById("messageContainer")||this.createMessageContainer();const messageElement=DOMUtils.createElement("div",`message message-${type}`);messageElement.innerHTML=`\n      <span class="message-text">${message}</span>\n      <button class="message-close">&times;</button>\n    `;const closeBtn=messageElement.querySelector(".message-close");closeBtn?.addEventListener("click",()=>{AnimationUtils.fadeOut(messageElement,300).then(()=>{messageElement.remove()})});messageContainer.appendChild(messageElement);setTimeout(()=>{if(messageElement.parentElement){AnimationUtils.fadeOut(messageElement,300).then(()=>{messageElement.remove()})}},5e3);AnimationUtils.fadeIn(messageElement,300)}createMessageContainer(){const container=DOMUtils.createElement("div","message-container");container.id="messageContainer";document.body.appendChild(container);return container}async showConfirmDialog(title,message){return new Promise(resolve=>{const dialog=this.createConfirmDialog(title,message,resolve);document.body.appendChild(dialog);requestAnimationFrame(()=>{DOMUtils.addClass(dialog,"active")})})}createConfirmDialog(title,message,callback){const dialog=DOMUtils.createElement("div","confirm-dialog");dialog.innerHTML=`\n      <div class="dialog-overlay"></div>\n      <div class="dialog-content">\n        <h3 class="dialog-title">${title}</h3>\n        <p class="dialog-message">${message}</p>\n        <div class="dialog-actions">\n          <button class="btn btn-secondary dialog-cancel">Cancel</button>\n          <button class="btn btn-danger dialog-confirm">Confirm</button>\n        </div>\n      </div>\n    `;const closeDialog=result=>{DOMUtils.removeClass(dialog,"active");setTimeout(()=>{dialog.remove();callback(result)},300)};const cancelBtn=dialog.querySelector(".dialog-cancel");const confirmBtn=dialog.querySelector(".dialog-confirm");const overlay=dialog.querySelector(".dialog-overlay");cancelBtn?.addEventListener("click",()=>closeDialog(false));confirmBtn?.addEventListener("click",()=>closeDialog(true));overlay?.addEventListener("click",()=>closeDialog(false));return dialog}generateId(){const allIds=[...this.portfolioData.map(item=>item.id),...this.productsData.map(item=>item.id)];return Math.max(0,...allIds)+1}getCategoryName(category){const categoryNames={ilustrasi:"Ilustrasi",character:"Character Design",branding:"Branding",editorial:"Editorial"};return categoryNames[category]||category}getDefaultPortfolio(){return[{id:1,title:"Digital Art Sample",category:"ilustrasi",image:ImageUtils.createPlaceholder(400,300,"Digital Art"),description:"Sample digital artwork",status:"active"}]}getDefaultProducts(){return[{id:1,name:"Sample Product",price:1e5,description:"Sample digital product",image:ImageUtils.createPlaceholder(300,200,"Product"),status:"active"}]}getDefaultSettings(){return{siteName:"Portfolio Admin",heroTitle:"Ilustrator & Desainer",heroSubtitle:"Menciptakan karya visual yang menginspirasi",whatsappNumber:"6281234567890",aboutText:"Professional illustrator and graphic designer with 5+ years of experience."}}getDefaultThumbnailSizes(){return[{name:"small",width:150,height:100},{name:"medium",width:300,height:200},{name:"large",width:600,height:400}]}}const adminApp=new AdminApp;if(document.readyState==="loading"){document.addEventListener("DOMContentLoaded",()=>adminApp.init())}else{adminApp.init()}export default adminApp;export{AdminApp};